name: Eureka Server CI/CD Pipeline

on:
#  pull_request:
#    branches:
#      - main  # main 브랜치로의 PR에만 적용
#    if: github.head_ref == 'feature/eureka'
#
  push:
    branches:
      - main  # main 브랜치에 push 이벤트 발생 시에만 deploy 실행
#  push:
#    branches:
#      - 'feature/eureka'
  pull_request:
    branches:
      - main
    branches-ignore:
      - 'feature/cart'
      - 'feature/gateway'
##
jobs:
  build:
    runs-on: ubuntu-latest
#    if: github.event.pull_request.head.ref == 'feature/eureka' || github.ref == 'refs/heads/main'
    if: github.event.pull_request.head.ref == 'feature/eureka'

    steps:
      - name: Checkout code # 현재 레포지토리에 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Run tests # 테스트
        run: ./gradlew test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-eureka-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/eureka/*.sh before-deploy/
          cp appspec/EurekaAppSpec.yml before-deploy/
          cp module-eureka-server/Dockerfile before-deploy/
          cp module-eureka-server/build/libs/*.jar before-deploy/
          
          cd before-deploy
          zip -r EurekaServer_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/EurekaServer_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/EurekaServer_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=EurekaServer_CI-CD.zip}" \
            --region ap-northeast-2
