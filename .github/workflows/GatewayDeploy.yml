name: Gateway Service CI/CD Pipeline

on:
  pull_request:
    branches:
      - main  # main 브랜치로의 PR에만 적용
    paths:
      - 'feature/gateway/**'  # feature/gateway 브랜치에서만 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code # 현재 레포지토리에 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Run tests # 테스트
        run: ./gradlew test

  auto-merge:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.pull_request.merged == false # PR이 아직 병합되지 않은 상태여야 함

    steps:
      - name: Auto-merge PR if approved # PR이 승인되면 main으로 자동 병합
        uses: actions/github-script@v7
        with:
          script: |
            const { data: reviews } = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            
            // 승인된 리뷰가 있는지 확인
            const approved = reviews.some(review => review.state === "APPROVED");
            if (approved) {
              await github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
              });
              console.log("PR has been merged successfully!");
            } else {
              console.log("PR is not approved yet.");
            }

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp scripts/gateway/*.sh before-deploy/
          cp appspec/GatewayAppSpec.yml before-deploy/
          cp module-gateway-service/Dockerfile before-deploy/
          cp module-gateway-service/build/libs/*.jar before-deploy/
          cd before-deploy && zip -r before-deploy.zip *
          mv before-deploy/before-deploy.zip deploy/GatewayService_CI-CD.zip

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp deploy/GatewayService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/GatewayService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion_mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucketName=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=GatewayService_CI-CD.zip}" \
            --region ap-northeast-2