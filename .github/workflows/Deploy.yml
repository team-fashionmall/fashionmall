name: Deploy CI/CD Pipeline

on:
  pull_request:
    branches:
      - main  # main 브랜치에 머지될 때만 실행
    types: [ closed ]

jobs:
  deploy_eureka:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/CI-CDs'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-eureka-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/eureka/*.sh before-deploy/
          cp module-eureka-server/appspec.yml before-deploy/
          cp module-eureka-server/Dockerfile before-deploy/
          cp module-eureka-server/build/libs/*.jar before-deploy/
          
          cd before-deploy
          zip -r EurekaServer_CI-CD.zip *
      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/EurekaServer_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/EurekaServer_CI-CD.zip
      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=EurekaServer_CI-CD.zip}" \
            --region ap-northeast-2

  deploy_gateway:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/gateway'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-gateway-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/gateway/*.sh before-deploy/
          cp module-gateway-service/appspec.yml before-deploy/
          cp module-gateway-service/Dockerfile before-deploy/
          cp module-gateway-service/build/libs/*.jar before-deploy/

          cd before-deploy
          zip -r GatewayService_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/GatewayService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/GatewayService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=GatewayService_CI-CD.zip}" \
            --region ap-northeast-2

  deploy_cart:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/cart'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-cart-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/cart/*.sh before-deploy/
          cp module-cart-service/appspec.yml before-deploy/
          cp module-cart-service/Dockerfile before-deploy/
          cp module-cart-service/build/libs/*.jar before-deploy/

          cd before-deploy
          zip -r CartService_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/CartService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/CartService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=CartService_CI-CD.zip}" \
            --region ap-northeast-2

  deploy_coupon:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/coupon'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-coupon-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/coupon/*.sh before-deploy/
          cp module-coupon-service/appspec.yml before-deploy/
          cp module-coupon-service/Dockerfile before-deploy/
          cp module-coupon-service/build/libs/*.jar before-deploy/

          cd before-deploy
          zip -r CouponService_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/CouponService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/CouponService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=couponService_CI-CD.zip}" \
            --region ap-northeast-2

  deploy_image:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/image'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-image-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/image/*.sh before-deploy/
          cp module-image-service/appspec.yml before-deploy/
          cp module-image-service/Dockerfile before-deploy/
          cp module-image-service/build/libs/*.jar before-deploy/

          cd before-deploy
          zip -r ImageService_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/ImageService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/ImageService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=ImageService_CI-CD.zip}" \
            --region ap-northeast-2

  deploy_item:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/item'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-item-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/item/*.sh before-deploy/
          cp module-item-service/appspec.yml before-deploy/
          cp module-item-service/Dockerfile before-deploy/
          cp module-item-service/build/libs/*.jar before-deploy/

          cd before-deploy
          zip -r ItemService_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/ItemService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/ItemService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=ItemService_CI-CD.zip}" \
            --region ap-northeast-2

  deploy_order:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/order'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-order-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/order/*.sh before-deploy/
          cp module-order-service/appspec.yml before-deploy/
          cp module-order-service/Dockerfile before-deploy/
          cp module-order-service/build/libs/*.jar before-deploy/

          cd before-deploy
          zip -r OrderService_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/OrderService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/OrderService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=OrderService_CI-CD.zip}" \
            --region ap-northeast-2

  deploy_review:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/review'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-review-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/review/*.sh before-deploy/
          cp module-review-service/appspec.yml before-deploy/
          cp module-review-service/Dockerfile before-deploy/
          cp module-review-service/build/libs/*.jar before-deploy/

          cd before-deploy
          zip -r ReviewService_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/ReviewService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/ReviewService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=ReviewService_CI-CD.zip}" \
            --region ap-northeast-2

  deploy_user:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'feature/user'

    steps:
      - name: Checkout code # 현재 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: Set up AWS CLI # AWS CLI 자격 증명
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESSKEY }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17 # JDK17 버전으로 환경 구성
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project with Gradle # 모듈 빌드
        run: ./gradlew clean build

      - name: Check if JAR file exists
        run: |
          if [ ! -f module-user-server/build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

      - name: Prepare deployment package # 배포에 필요한 파일을 (임시)폴더에 복사 후 .zip 배포 패키지 준비
        run: |
          mkdir -p before-deploy
          cp script/user/*.sh before-deploy/
          cp module-user-service/appspec.yml before-deploy/
          cp module-user-service/Dockerfile before-deploy/
          cp module-user-service/build/libs/*.jar before-deploy/

          cd before-deploy
          zip -r UserService_CI-CD.zip *

      - name: Upload to S3 # S3에 업로드
        run: |
          aws s3 cp before-deploy/UserService_CI-CD.zip s3://my-fashionmall-github-actions-s3-bucket/UserService_CI-CD.zip

      - name: Trigger CodeDeploy deployment # CodeDeploy 트리거 해 모듈 어플리케이션 배포 그룹에 배포
        run: |
          aws deploy create-deployment \
            --application-name fashion-mall \
            --deployment-group-name fashion-mall-deployment-group \
            --revision "revisionType=S3,s3Location={bucket=my-fashionmall-github-actions-s3-bucket,bundleType=zip,key=UserService_CI-CD.zip}" \
            --region ap-northeast-2